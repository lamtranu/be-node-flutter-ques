import express from "express";
import multer from "multer"; // For handling file uploads
import { GoogleGenerativeAI } from "@google/generative-ai";
import { GoogleAIFileManager } from "@google/generative-ai/server";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import mongoose from "mongoose";
import cors from "cors";
import bodyParser from "body-parser";
import bcrypt from "bcryptjs";
import { PDFDocument } from "pdf-lib";

import { MONGO_DB_CONFIG } from "./config/app.config.js";

import { fileTypeFromBuffer } from "file-type";
import { readFile } from "fs/promises";

import './jobs/cronJobs.js';

import User from "./models/user.model.js";

import * as dotenv from "dotenv";
dotenv.config(); // Load environment variables

const app = express();
const port = 5000; // Or any port you prefer
const server_version = MONGO_DB_CONFIG.SERVER_VERSION;

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.json());

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const UPLOAD_FOLDER = path.join(__dirname, "file"); // Use path.join for cross-platform compatibility
fs.mkdirSync(UPLOAD_FOLDER, { recursive: true }); // Create directory if doesn't exist

const storage = multer.diskStorage({
  destination: UPLOAD_FOLDER,
  filename: (req, file, cb) => {
    cb(null, file.originalname); // Use original filename
  },
});

const upload = multer({ storage: storage });

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

let total_token_output = 0;
let total_token_input = 0;
let total_token_in_and_out = 0;
let total_api_visit = 0;

async function getMimeType(filePath) {
  try {
    const buffer = await readFile(filePath);
    const type = await fileTypeFromBuffer(buffer);
    return type?.mime || "application/octet-stream";
  } catch (error) {
    console.error("L·ªói khi x√°c ƒë·ªãnh MIME type:", error);
    return "application/octet-stream";
  }
}

app.post("/api/convert/file/create", upload.single("file"), async (req, res) => {
  try {
    let statusSendFile = false;
    const version = req.body.version;

    const type = req.body.type;
    const file = req.file;
    //info user
    const email = req.body.email;
    const password = req.body.password;

    let infoUser = null;

    const endPage = req.body.endPage;
    const startPage = req.body.startPage;

    total_api_visit += 1;
    console.log("-----------NEW REQUEST--------------");
    console.log("email: " + email);
    console.log("password: " + password);
    console.log("version client: " + version);
    console.log("version server: " + server_version);
    console.log("endPage: " + endPage);
    console.log("startPage: " + startPage);
    console.log("type: " + type);
    
    if (version != server_version) {
      return res.json({ statusSendFile: statusSendFile, data: "Phi√™n b·∫£n kh√¥ng h·ª£p l·ªá, vui l√≤ng c·∫≠p nh·∫≠t phi√™n b·∫£n m·ªõi ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng" });
    }

    if (!file) {
      return res.json({ statusSendFile: statusSendFile, data: "Ch∆∞a ch·ªçn file ƒë·ªÉ s·ª≠ d·ª•ng" });
    }

    if (email == undefined || email == "") {
      return res.json({ statusSendFile: statusSendFile, data: "Vui l√≤ng ƒëƒÉng nh·∫≠p t√†i kho·∫£n ƒë·ªÉ s·ª≠ d·ª•ng!" });
    }

    const userData = await User.findOne({ email: email });
   
    if (userData == null) {
      return res.json({ statusSendFile: statusSendFile, data: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!" });
    } else {
      
      if (!bcrypt.compareSync(password, userData.password)) {
        return res.json({ statusSendFile: statusSendFile, data: "Th√¥ng tin t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c!" });
      } else {
        infoUser = userData;
        if (userData.cryptoToken < 5000) {
          return res.json({
            statusSendFile: statusSendFile,
            data: "Ph·∫£i c√≥ tr√™n üî• 5,000 m·ªõi ƒë∆∞·ª£c s·ª≠ d·ª•ng, b·∫°n c√≥ th·ªÉ xem video qu·∫£ng c√°o ƒë·ªÉ tƒÉng th√™m üî• nh√©!",
          });
        } else {
          const filePath = path.join(UPLOAD_FOLDER, file.filename); // Corrected file path
          const fileManager = new GoogleAIFileManager(GEMINI_API_KEY);

          const fileMimeType = await getMimeType(filePath);
          console.log("Detected MIME Type:", fileMimeType);

          if (type == "quiz") {
            const fileBytes = fs.readFileSync(filePath);

            // Load file PDF g·ªëc
            const pdfDoc = await PDFDocument.load(fileBytes);
            const newPdf = await PDFDocument.create();

            // Ki·ªÉm tra trang h·ª£p l·ªá
            const totalPages = pdfDoc.getPageCount();
            if (startPage < 1 || endPage > totalPages || startPage > endPage) {
              return res.status(400).json({ error: "Trang kh√¥ng h·ª£p l·ªá" });
            }

            // Tr√≠ch xu·∫•t c√°c trang t·ª´ PDF g·ªëc
            const copiedPages = await newPdf.copyPages(
              pdfDoc,
              Array.from({ length: endPage - startPage + 1 }, (_, i) => startPage - 1 + i)
            );

            // Th√™m trang ƒë√£ sao ch√©p v√†o PDF m·ªõi
            copiedPages.forEach((page) => newPdf.addPage(page));

            // L∆∞u file m·ªõi
            const newPdfBytes = await newPdf.save();
            const newFileName = `extracted_${Date.now()}.pdf`;
            const newFilePath = path.join(UPLOAD_FOLDER, newFileName);
            fs.writeFileSync(newFilePath, newPdfBytes);

            console.log("PDF m·ªõi ƒë√£ l∆∞u:", newFilePath);

            const sample_pdf = await fileManager.uploadFile(newFilePath, {
              mimeType: fileMimeType,
            });

            const prompt = `
            **Y√™u c·∫ßu:**
            T√¥i mu·ªën b·∫°n ƒë·ªçc file PDF ƒë√≠nh k√®m v√† chuy·ªÉn ƒë·ªïi n·ªôi dung c·ªßa n√≥ th√†nh c√°c c√¢u h·ªèi tr·∫Øc nghi·ªám d·∫°ng JSON.
        
            **H∆∞·ªõng d·∫´n:**
            1. **Ph√¢n t√≠ch n·ªôi dung:** X√°c ƒë·ªãnh c√°c ph·∫ßn n·ªôi dung quan tr·ªçng trong file PDF (ch∆∞∆°ng, m·ª•c, ƒëo·∫°n) v√† bi·∫øn ch√∫ng th√†nh c√¢u h·ªèi.
            2. **C·∫•u tr√∫c JSON:**
               - M·ªói c√¢u h·ªèi ph·∫£i bao g·ªìm:
                 - \`"question"\`: C√¢u h·ªèi.
                 - \`"options"\`: M·ªôt danh s√°ch c√°c l·ª±a ch·ªçn.
                 - \`"answer"\`: L·ª±a ch·ªçn ƒë√∫ng trong danh s√°ch.
               - ƒê·∫£m b·∫£o ƒë√∫ng c·∫•u tr√∫c m·∫´u sau:
                 \`\`\`json
                 [JSON_START]
                 {
                   "questions": [
                     {
                       "question": "What is an operating system?",
                       "options": [
                         "A collection of programs that manage hardware resources",
                         "A system service provider to application programs",
                         "A link between hardware and application programs",
                         "All of the mentioned"
                       ],
                       "answer": "All of the mentioned"
                     }
                   ]
                 }
                 [JSON_END]
                 \`\`\`
            3. **Quy t·∫Øc:**
               - Ch·ªâ m·ªôt ƒë√°p √°n ƒë√∫ng cho m·ªói c√¢u h·ªèi.
               - Chuy·ªÉn ƒë·ªïi t·ªëi ƒëa n·ªôi dung th√†nh c√¢u h·ªèi, ∆∞u ti√™n n·ªôi dung d·ªÖ hi·ªÉu.
               - To√†n b·ªô c√¢u tr·∫£ l·ªùi ph·∫£i n·∫±m gi·ªØa \`[JSON_START]\` v√† \`[JSON_END]\`.
               - Ch·ªâ chuy·ªÉn t·ªëi ƒëa 30 c√¢u tr·∫Øc nghi·ªám.
            `;

            // const response = await model.generateContent([prompt, sample_pdf]);
            const response = await model.generateContent([
              prompt,
              {
                fileData: {
                  fileUri: sample_pdf.file.uri,
                  mimeType: sample_pdf.file.mimeType,
                },
              },
            ]);

            if (response.response.usageMetadata) {
              statusSendFile = true;
              total_token_output += response.response.usageMetadata.candidatesTokenCount;
              total_token_input += response.response.usageMetadata.promptTokenCount;
              total_token_in_and_out += response.response.usageMetadata.totalTokenCount;
              let profit = Math.round(response.response.usageMetadata.totalTokenCount * 0.2);     //l·ª£i nhu·∫≠n 20% tr√™n file
              userData.cryptoToken -= Math.round(response.response.usageMetadata.totalTokenCount + profit);
              await userData.save();
              console.log(`-----------RESULT------------`);
              console.log(`email: ` + email);
              console.log(`Lo·∫°i: ` + type);
              console.log(`User c√≤n lai: ` + userData.cryptoToken);
              console.log('L·ª£i nhu·∫≠n: ' + profit)
              console.log('T·ªïng ƒë√£ tr·ª´: ' + Math.round(response.response.usageMetadata.totalTokenCount + profit));
              console.log(`T·ªïng In v√† Out: ${response.response.usageMetadata.totalTokenCount}`);
              console.log(`T·ªïng Output: ${response.response.usageMetadata.candidatesTokenCount}`);
              console.log(`T·ªïng Input : ${response.response.usageMetadata.promptTokenCount}`);
              //console.log(`-----------------------------`);
            }

            const responseText = response.response.text(); // L·∫•y text t·ª´ response

            const startIndex = responseText.indexOf("[JSON_START]") + "[JSON_START]".length;
            const endIndex = responseText.indexOf("[JSON_END]");
            const jsonString = responseText.substring(startIndex, endIndex).trim();

            const data = JSON.parse(jsonString);
            res.json({ data: data, infoUser: infoUser});
          } else if (type == "summary") {
            try {
              const prompt = `
            **Y√™u c·∫ßu:**
            -T√¥i mu·ªën b·∫°n ƒë·ªçc file PDF ƒë√≠nh k√®m v√† t√≥m t·∫Øt l·∫°i n·ªôi dung.\n
            -B·∫°n ph·∫£i tr·∫£ l·ªùi th√†nh ti·∫øng vi·ªát.
            `;
              const response = await model.generateContent([
                prompt,
                {
                  fileData: {
                    fileUri: sample_pdf.file.uri,
                    mimeType: sample_pdf.file.mimeType,
                  },
                },
              ]);

              if (response.response.usageMetadata) {
                total_token_output += response.response.usageMetadata.candidatesTokenCount;
                total_token_input += response.response.usageMetadata.promptTokenCount;
                total_token_in_and_out += response.response.usageMetadata.totalTokenCount;

                userData.cryptoToken -= response.response.usageMetadata.totalTokenCount;
                await userData.save();

                console.log(`Total Tokens: ${total_token_in_and_out}`);
                console.log(`Total Tokens Output: ${total_token_output}`);
                console.log(`Total Tokens Input: ${total_token_input}`);
              }

              const responseText = response.response.text(); // L·∫•y text t·ª´ response
              console.log(responseText);
              res.json({ data: responseText, statusSendFile: true, cryptoToken: userData.cryptoToken});
            } catch (e) {
              console.log(e);
              res.json({ data: "C√≥ l·ªói ·ªü Server, vui l√≤ng ch·ªù sau v√†i ph√∫t v√† y√™u c·∫ßu l·∫°i", statusSendFile: false });
            }
          }
        }
      }
    }
  } catch (error) {
    console.log(error);
    res.json({ data: "C√≥ l·ªói ·ªü Server, vui l√≤ng ch·ªù sau v√†i ph√∫t v√† y√™u c·∫ßu l·∫°i", statusSendFile: false });
  }
});

mongoose.Promise = global.Promise;
mongoose
  .connect(MONGO_DB_CONFIG.DB)
  .then(() => console.log("DB connected"))
  .catch((error) => console.log("DB connection error:", error));

// Routes
import appRoutes from "./routers/app.routers.js"; // S·ª≠ d·ª•ng import cho routes
import { info } from "console";


app.use("/api", appRoutes);

app.listen(port, () => {
  console.log(`Server is listening on port ${port}`);
});
